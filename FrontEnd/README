INSTALLATION PROCESS
mkdir my-app
cd my-app
npm init -y
npm install react react-dom
npm install --save-dev typescript @types/react @types/react-dom
npm install --save-dev vite @vitejs/plugin-react

CREATE FOLDER STRUCTURE
my-app/
â”œâ”€â”€ public/
â”‚   â””â”€â”€ vite.svg (optional assets)
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ App.tsx
â”‚   â””â”€â”€ main.tsx
â”œâ”€â”€ index.html
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ vite.config.ts
â””â”€â”€ package.json

--index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

--src/main.tsx
mport React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<React.StrictMode><App /></React.StrictMode>);

--src/App.tsx
import React from 'react';

const App: React.FC = () => {
  return <h1>Hello from Vite + React + TypeScript ðŸ‘‹</h1>;
};

export default App;


--vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
});

--tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "moduleResolution": "Node",
    "strict": true,
    "jsx": "react-jsx",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"]
}

--package.json
"scripts": {
  "dev": "vite",
  "build": "vite build",
  "preview": "vite preview"
}

TO RUN APP
npm run dev

----------------------------------------------------------
#To Push to Git Repository
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/OlegKolesnikovCode/TestApplication.git
git push -u origin main

#After that use 
git push

#Alternativly: Create an alies :
git config --global alias.acp '!git add . && git commit -m'

#To use it
git acp "my comment" && git push

#OR create a PowerShell Function by running the following command
notepad $PROFILE

#Paste this into the file:
function gitacp {
  param([string]$msg)
  git add .
  git commit -m "$msg"
  git push
}

#To use it:
gitacp "Your commit message here"




